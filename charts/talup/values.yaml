# Default values for talup
replicaCount: 1

image:
  repository: ghcr.io/home-operations/talup
  pullPolicy: IfNotPresent
  tag: ""

talup:
  talosctl:
    image:
      repository: ghcr.io/siderolabs/talosctl
      tag: latest
  configSecret: talup

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  fsGroup: 65532

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532

service:
  type: ClusterIP
  port: 8080
  metricsPort: 8080

resources:
  limits:
    cpu: 500m
    memory: 128Mi
  requests:
    cpu: 10m
    memory: 64Mi

livenessProbe:
  httpGet:
    path: /healthz
    port: 8081
  initialDelaySeconds: 15
  periodSeconds: 20

readinessProbe:
  httpGet:
    path: /readyz
    port: 8081
  initialDelaySeconds: 5
  periodSeconds: 10

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}

# Controller configuration
controller:
  # Leader election configuration
  leaderElection:
    enabled: false
    leaseDuration: 60s
    renewDeadline: 40s
    retryPeriod: 10s

  # Metrics configuration
  metrics:
    enabled: true
    port: 8080

  # Health probe configuration
  health:
    port: 8081

# Webhook configuration
webhook:
  enabled: true
  port: 9443
  certManager:
    enabled: true

# RBAC configuration
rbac:
  create: true

# CRD management
crds:
  # Whether to install CRDs
  install: true
  # Whether to keep CRDs on uninstall
  keep: true

# Monitoring
monitoring:
  serviceMonitor:
    enabled: false
    labels: {}
    annotations: {}
    interval: 30s
    scrapeTimeout: 10s
